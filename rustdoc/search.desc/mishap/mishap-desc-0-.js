searchState.loadedDescShard("mishap", 0, "<strong>Mishap</strong> is a trait object-based library for dynamically …\nContains the error value\nA generic tree of errors, where each error can have any …\nEquivalent to <code>Ok::&lt;_, mishap::Mishap&gt;(value)</code>.\nContains the success value\nA type alias for <code>Result&lt;T, Mishap&gt;</code>.\nExtension trait for wrapping <code>anyhow::Error</code> errors.\nExtension trait for wrapping <code>anyhow::Error</code> error lists or …\nExtension trait for wrapping individual errors with ad-hoc …\nExtension trait for wrapping error trees with ad-hoc …\nExtension trait for wrapping lists or other iterators of …\nExtension trait for wrapping lists or other iterators of …\nReturns the argument unchanged.\nConstructs a tree from a borrowed error, effectively …\nConstructs a tree from a borrowed tree, effectively …\nCreate a tree from a message and a chain of causes.\nCalls <code>U::from(self)</code>.\nWrap the error value with a new ad-hoc message.\nWrap the error value with a new ad-hoc message that is …\nWrap the anyhow list with a new ad-hoc message.\nWrap the anyhow list with a new ad-hoc message that is …\nWrap the error value with a new ad-hoc message.\nConvert the error value into a <code>Mishap</code> without attaching …\nWrap the error tree with a new ad-hoc message.\nConvert the error tree into a <code>Mishap</code> without attaching …\nWrap the error tree with a new ad-hoc message that is …\nWrap the error tree list with a new ad-hoc message.\nWrap the error tree list with a new ad-hoc message that is …\nWrap the error value with a new ad-hoc message that is …\nWrap the error list with a new ad-hoc message.\nWrap the error list with a new ad-hoc message that is …")